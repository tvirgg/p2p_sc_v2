import { Address, beginCell, toNano, Dictionary, Cell, Slice } from "ton-core";
import { compile } from "@ton-community/blueprint";
import { Blockchain, SandboxContract, TreasuryContract } from "@ton-community/sandbox";
import { P2P } from "../wrappers/P2P";
import '@ton-community/test-utils';

// Define constants from the contract
const COMMISSION_WITH_MEMO = 3; // 3% commission for deals with memo

describe("P2P Contract Sandbox", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;
    let moderatorWallet: SandboxContract<TreasuryContract>;

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hex –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
    // –∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ —á–µ—Ä–µ–∑ sandbox.
    const BUYER_HEX  = "0:2222000022220000222200002222000022220000222200002222000022220000";

    beforeEach(async () => {
        // 1) –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        blockchain = await Blockchain.create();
        blockchain.verbosity = {
            blockchainLogs: true,
            vmLogs: "vm_logs",
            debugLogs: true,
            print: false,
        };

        // 2) –°–æ–∑–¥–∞—ë–º "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" (–∫–æ—à–µ–ª—ë–∫)
        moderatorWallet = await blockchain.treasury("moderator");

        // 3) –ö–æ–º–ø–∏–ª–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, P2P.fc)
        const code = await compile("P2P");

        // 4) –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É
        const p2pConfig = P2P.createFromConfig(moderatorWallet.address, code, 0);

        // 5) "–û—Ç–∫—Ä—ã–≤–∞–µ–º" –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ sandbox
        contract = blockchain.openContract(p2pConfig);

        // 6) –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        await contract.sendDeploy(
            moderatorWallet.getSender(),
            toNano("0.05")
        );
        
        process.stdout.write(`üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${contract.address.toString()}\n`);
    });

    it("should create a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "1236";

        // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à memoCell (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const memoHash = memoCell.hash().toString("hex");
        process.stdout.write(`üîñ Memo Hash: ${memoHash}\n`);

        process.stdout.write(`üèÅ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å: ${contract.address.toString()}\n`);
        process.stdout.write(`üèÅ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å: ${moderatorWallet.address.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        expect(createResult.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to: contract.address,
            success: true,
            op: 1,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfter = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï: ${JSON.stringify(contractDataAfter)}\n`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
        const dealCounter = await contract.getDealCounter();
        process.stdout.write(`üìä dealCounter = ${dealCounter}\n`);
        expect(dealCounter).toBe(1);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º getDealInfo(0)
        const infoBefore = await contract.getDealInfo(0);
        process.stdout.write(`üßÆ Deal Info (index=0) = ${JSON.stringify({
            ...infoBefore,
            amount: infoBefore.amount
        }, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);
        expect(infoBefore.amount.toString()).toBe(dealAmount.toString());
        expect(infoBefore.funded).toBe(0);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        try {
            const fullDealInfo = await contract.getFullDealInfo(0);
            process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ: ${JSON.stringify(fullDealInfo)}\n`);
        } catch (error) {
            process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ: ${error}\n`);
        }
    });

    it("should create and fund a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "DEAL:1";

        // –°–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—ë–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const buyerWallet = await blockchain.treasury("buyer");

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceBefore = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceBefore.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function printAllDebugLogs(transaction: any): void {
            if (!transaction) return;
            
            // –í—ã–≤–æ–¥ debug logs –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (transaction.debugLogs) {
                process.stdout.write(`üìã DEBUG LOGS (${transaction.address || 'unknown'}):\n`);
                transaction.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (transaction.children && Array.isArray(transaction.children)) {
                transaction.children.forEach((child: any) => printAllDebugLogs(child));
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        printAllDebugLogs(createResult);
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfterCreate = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterCreate)}\n`);

        const dealCounterAfterCreate = await contract.getDealCounter();
        process.stdout.write(`üìà Deal counter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${dealCounterAfterCreate}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoBeforeFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoBeforeFunding.amount,
            funded: dealInfoBeforeFunding.funded
        }, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullDealInfoBeforeFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoBeforeFunding, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1") // —á—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è —É—á—ë—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceAfter.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const contractDataAfterFunding = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterFunding)}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoAfterFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoAfterFunding.amount.toString(),
            funded: dealInfoAfterFunding.funded
        })}\n`);
        expect(dealInfoAfterFunding.amount.toString()).toBe(dealAmount.toString());
        expect(dealInfoAfterFunding.funded).toBe(1);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const fullDealInfoAfterFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoAfterFunding, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);
    });

    it("should resolve deal in favor of seller", async () => {
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É.
        const sellerWallet = await blockchain.treasury("seller");
        const buyerWallet = await blockchain.treasury("buyer");

        process.stdout.write(`üèÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –∞–¥—Ä–µ—Å: ${sellerWallet.address.toString()}\n`);
        process.stdout.write(`üèÅ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å: ${buyerWallet.address.toString()}\n`);
        const dealAmount = toNano("2");
        const memoText = "deal-to-seller";
        const buyerBalanceStart = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance START resolution: ${buyerBalanceStart.toString()}\n`);
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ—Ä—ë–º –∏–∑ –∫–æ—à–µ–ª—å–∫–∞)
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            sellerWallet.address,
            buyerWallet.address,
            dealAmount,
            memoText
        );
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function extractAndPrintAllDebugLogs(obj: any, visited = new Set()): void {
            if (!obj || typeof obj !== 'object' || visited.has(obj)) return;
            visited.add(obj);
        
            if (typeof obj.debugLogs === 'string') {
                process.stdout.write(`üìã DEBUG LOGS:\n`);
                obj.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
        
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const val = obj[key];
        
                    if (Array.isArray(val)) {
                        val.forEach((child) => extractAndPrintAllDebugLogs(child, visited));
                    } else if (typeof val === 'object' && val !== null) {
                        extractAndPrintAllDebugLogs(val, visited);
                    }
                }
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        extractAndPrintAllDebugLogs(createResult);
        
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1")
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);
        const buyerBalanceSend = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER SEND: ${buyerBalanceSend.toString()}\n`);
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceBefore = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance BEFORE resolution: ${sellerBalanceBefore.toString()}\n`);

        // –®–∞–≥ 3: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (approvePayment = true)
        const resolveResult = await contract.sendResolveDealExternal( // Call the corrected function
            moderatorWallet.address,  // Moderator's address to be put in the message body
            memoText,                 // The crucial memo
            true                     
        );

        // Log the full resolveResult object for debugging
        if (resolveResult && Array.isArray(resolveResult.transactions) && resolveResult.transactions.length > 0) {
            // 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const firstTransaction = resolveResult.transactions[0];
        
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debugLogs –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/null/undefined
            if ('debugLogs' in firstTransaction && firstTransaction.debugLogs) {
            // 4. –í—ã–≤–æ–¥–∏–º debugLogs –∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const debugLogs = firstTransaction.debugLogs.split('\n');
            debugLogs.forEach((logLine) => {
                process.stdout.write(`üìã Debug Log Line: ${logLine}\n`);
            });
            } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ debugLogs –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            process.stdout.write(`üìã Debug Logs: null or empty in the first transaction\n`);
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
            process.stdout.write(`üìã Debug Logs: No transactions found or transactions array is empty\n`);
        }
        expect(resolveResult.transactions).toHaveTransaction({
            to: contract.address,
            on: contract.address,
            success: true,
            op: 2,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceAfter = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance AFTER resolution: ${sellerBalanceAfter.toString()}\n`);
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER resolution: ${buyerBalanceAfter.toString()}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
        const margin = toNano("0.03"); // Allowable margin for transaction fees
        expect(sellerBalanceAfter - sellerBalanceBefore + margin).toBeGreaterThanOrEqual(dealAmount);
    });
    it("should resolve deal in favor of buyer", async () => {
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É.
        const sellerWallet = await blockchain.treasury("seller");
        const buyerWallet = await blockchain.treasury("buyer");

        process.stdout.write(`üèÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –∞–¥—Ä–µ—Å: ${sellerWallet.address.toString()}\n`);
        process.stdout.write(`üèÅ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å: ${buyerWallet.address.toString()}\n`);
        const dealAmount = toNano("2");
        const memoText = "deal-to-seller";
        const buyerBalanceStart = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance START resolution: ${buyerBalanceStart.toString()}\n`);
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ—Ä—ë–º –∏–∑ –∫–æ—à–µ–ª—å–∫–∞)
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            sellerWallet.address,
            buyerWallet.address,
            dealAmount,
            memoText
        );
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function extractAndPrintAllDebugLogs(obj: any, visited = new Set()): void {
            if (!obj || typeof obj !== 'object' || visited.has(obj)) return;
            visited.add(obj);
        
            if (typeof obj.debugLogs === 'string') {
                process.stdout.write(`üìã DEBUG LOGS:\n`);
                obj.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
        
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const val = obj[key];
        
                    if (Array.isArray(val)) {
                        val.forEach((child) => extractAndPrintAllDebugLogs(child, visited));
                    } else if (typeof val === 'object' && val !== null) {
                        extractAndPrintAllDebugLogs(val, visited);
                    }
                }
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        extractAndPrintAllDebugLogs(createResult);
        
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1")
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);
        const buyerBalanceSend = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER SEND: ${buyerBalanceSend.toString()}\n`);
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceBefore = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance BEFORE resolution: ${sellerBalanceBefore.toString()}\n`);

        // –®–∞–≥ 3: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (approvePayment = true)
        const resolveResult = await contract.sendResolveDealExternal( // Call the corrected function
            moderatorWallet.address,  // Moderator's address to be put in the message body
            memoText,                 // The crucial memo
            false                     
        );

        // Log the full resolveResult object for debugging
        if (resolveResult && Array.isArray(resolveResult.transactions) && resolveResult.transactions.length > 0) {
            // 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const firstTransaction = resolveResult.transactions[0];
        
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debugLogs –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/null/undefined
            if ('debugLogs' in firstTransaction && firstTransaction.debugLogs) {
            // 4. –í—ã–≤–æ–¥–∏–º debugLogs –∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const debugLogs = firstTransaction.debugLogs.split('\n');
            debugLogs.forEach((logLine) => {
                process.stdout.write(`üìã Debug Log Line: ${logLine}\n`);
            });
            } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ debugLogs –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            process.stdout.write(`üìã Debug Logs: null or empty in the first transaction\n`);
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
            process.stdout.write(`üìã Debug Logs: No transactions found or transactions array is empty\n`);
        }
        expect(resolveResult.transactions).toHaveTransaction({
            to: contract.address,
            on: contract.address,
            success: true,
            op: 2,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceAfter = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance AFTER resolution: ${sellerBalanceAfter.toString()}\n`);
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER resolution: ${buyerBalanceAfter.toString()}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª –±–æ–ª—å—à–µ, —á–µ–º –∫–æ–º–∏—Å—Å–∏—é + —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        const commission = (dealAmount * BigInt(COMMISSION_WITH_MEMO)) / 100n; // 3% commission
        const margin = toNano("0.05"); // Allowable margin for transaction fees
        expect(buyerBalanceStart - buyerBalanceAfter).toBeLessThanOrEqual(commission + margin);
    });
    it("should allow moderator to withdraw commissions", async () => {
        const moderatorBalanceBefore = await moderatorWallet.getBalance();
        process.stdout.write(`üíº –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –î–û —Å–Ω—è—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–π: ${moderatorBalanceBefore.toString()}\n`);
    
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º –µ–µ, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –∫–æ–º–∏—Å—Å–∏–∏
        const SELLER = await blockchain.treasury("seller");
        const BUYER = await blockchain.treasury("buyer");
        const memoText = "withdraw-test";
        const dealAmount = toNano("2");
    
        await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER.address,
            BUYER.address,
            dealAmount,
            memoText
        );
    
        await contract.sendFundDeal(
            BUYER.getSender(),
            memoText,
            toNano("2.1") // —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        );
    
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const contractDataBeforeWithdraw = await contract.getContractData();
        const commissionsBefore = contractDataBeforeWithdraw.commissionsPool;
        process.stdout.write(`üè¶ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –î–û —Å–Ω—è—Ç–∏—è: ${commissionsBefore.toString()}\n`);
        expect(commissionsBefore).toBeGreaterThan(0n);
    
        // –®–∞–≥ 2: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é
        const withdrawAmount = toNano("0.03");
        const withdrawResult = await contract.sendWithdrawCommissions( // Call the corrected function
            moderatorWallet.address                
        );
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        expect(withdrawResult.transactions).toHaveTransaction({
            //to: contract.address,
            //on: contract.address,
            success: true,
            op: 4,
        });
        process.stdout.write(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n`);
    
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è
        const contractDataAfterWithdraw = await contract.getContractData();
        const commissionsAfter = contractDataAfterWithdraw.commissionsPool;
        process.stdout.write(`üè¶ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –ü–û–°–õ–ï —Å–Ω—è—Ç–∏—è: ${commissionsAfter.toString()}\n`);
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å
        expect(commissionsAfter).toBeLessThan(commissionsBefore);
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫)
        const moderatorBalanceAfter = await moderatorWallet.getBalance();
        const delta = moderatorBalanceAfter - moderatorBalanceBefore;
        process.stdout.write(`üíº –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ü–û–°–õ–ï: ${moderatorBalanceAfter.toString()}\n`);
        process.stdout.write(`üìà Œî –ë–∞–ª–∞–Ω—Å: ${delta.toString()}\n`);
    
        const minimumExpected = toNano("0.002"); // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—É–º–Ω–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
        expect(delta).toBeGreaterThanOrEqual(minimumExpected);

        expect(commissionsAfter).toBe(0);
    });
});

/**
 * –¢–µ—Å—Ç ¬´Refund unknown funds¬ª
 * -------------------------------------------------------
 * Happy‚Äëpath –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—ë—Ä—Ç–∫–∏ —É–∂–µ –ø–æ–∫—Ä—ã—Ç—ã, ‚Äî
 * –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å (treasury‚Äë–∫–æ—à–µ–ª—å–∫–∏ + wrapper),
 * –Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö ¬´—Å—ã—Ä–æ–º—è—Ç–Ω—ã—Ö¬ª —Ö–∞–∫–æ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ.
 */

/**
 * –¢–µ—Å—Ç ¬´Refund unknown funds¬ª —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
 * -------------------------------------------------------
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∑–∞–ª—ë—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Üí –∫–æ–º–∏—Å—Å–∏—è ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–∞
 */

describe("P2P ‚Äì refund unknown funds (correct check)", () => {
    let blockchain: Blockchain; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
    let contract: SandboxContract<P2P>; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ P2P
    let moderator: SandboxContract<TreasuryContract>; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

    beforeEach(async () => {
        blockchain = await Blockchain.create(); // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —ç–º—É–ª—è—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
        moderator  = await blockchain.treasury("moderator"); // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

        const code = await compile("P2P"); // –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–¥–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ P2P
        const cfg  = P2P.createFromConfig(moderator.address, code, 0); // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

        contract = blockchain.openContract(cfg); // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —ç–º—É–ª—è—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
        await contract.sendDeploy(moderator.getSender(), toNano("0.05")); // –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π 0.05 TON –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    });

    it("stores stray payment and throws on second refund", async () => {
        // -------- 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–∑–∞–ª—ë—Ç–Ω—ã–π¬ª –ø–ª–∞—Ç—ë–∂ --------------
        const stranger = await blockchain.treasury("stranger"); // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è "–ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const deposit  = toNano("1"); // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ 1 TON

        const memoCell = beginCell().storeStringTail("ghost-memo").endCell(); // –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "ghost-memo"
        const body     = beginCell().storeRef(memoCell).endCell(); // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ memoCell

        await stranger.send({
            to:   contract.address, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚Äî –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            value: deposit, // –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            bounce: true, // –í–∫–ª—é—á–µ–Ω–∏–µ bounce-—Ñ–ª–∞–≥–∞
            sendMode: 1, // –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            body // –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        });

        const commission  = deposit * 3n / 100n; // –†–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏ –≤ 3%
        const expectedNet = deposit - commission; // –†–∞—Å—á—ë—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏

        const stored = await contract.getUnknownFund(0); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ –∫–ª—é—á—É 0
        expect(stored).toBe(expectedNet); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π

        // -------- 2. –ü–µ—Ä–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ -----------------------------
        const balBefore = await stranger.getBalance(); // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ "–ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ" –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞

        await contract.sendRefundUnknown(
            moderator.getSender(), // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
            /* key = */ 0 // –ö–ª—é—á –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
        );

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞
        const storedAfter = await contract.getUnknownFund(0); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ –∫–ª—é—á—É –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        expect(storedAfter).toBe(0n); // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 0

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É (—Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π)
        const balAfter = await stranger.getBalance(); // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        expect(balAfter - balBefore).toBeGreaterThanOrEqual(expectedNet - toNano("0.05")); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

        // -------- 3. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π ------------
        const tx = await contract.sendRefundUnknown(
            moderator.getSender(), // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
            /* key = */ 0 // –¢–æ—Ç –∂–µ –∫–ª—é—á, —á—Ç–æ –∏ —Ä–∞–Ω–µ–µ
        );

        // ‚ù∂ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
        expect(tx.transactions).toHaveTransaction({
            to:      contract.address, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚Äî –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            success: false, // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞
            exitCode: 120 // –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ ‚Äî 120 (–æ—à–∏–±–∫–∞)
        });

        // ‚ù∑ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const stillZero = await contract.getUnknownFund(0); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ –∫–ª—é—á—É –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        expect(stillZero).toBe(0n); // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 0
            // -------- 4. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–≤–æ–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏—é -------------
    const modBalBefore = await moderator.getBalance(); // –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –≤—ã–≤–æ–¥–∞

    await contract.sendWithdrawCommissions(
        moderator.address // ‚Üê –∑–¥–µ—Å—å –≤–º–µ—Å—Ç–æ getSender
    );

    const modBalAfter = await moderator.getBalance(); // –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–∏ (—Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π)
    expect(modBalAfter - modBalBefore).toBeGreaterThanOrEqual(commission - toNano("0.05")); // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –æ–±–Ω—É–ª—ë–Ω
    const contractData = await contract.getContractData();
    const poolAfter = contractData.commissionsPool;
    expect(poolAfter).toBe(0);
    });
});
describe("P2P ‚Äì refund unknown funds (random memo)", () => {
    let blockchain: Blockchain;
    let moderator: SandboxContract<TreasuryContract>;
    let contract: SandboxContract<P2P>;

    beforeEach(async () => {
        blockchain = await Blockchain.create();
        moderator  = await blockchain.treasury("moderator");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code, 0);
        contract   = blockchain.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    it("handles unknown memo correctly", async () => {
        // ---------- 1. ¬´–ó–∞–ª—ë—Ç–Ω—ã–π¬ª –ø–µ—Ä–µ–≤–æ–¥ —Å RANDOM-memo -------------
        const stranger = await blockchain.treasury("stranger");
        const deposit  = toNano("1");

        const randomMemo = `unknown-memo-${Math.floor(Math.random() * 1e6)}`;
        const memoCell   = beginCell().storeStringTail(randomMemo).endCell();
        const body       = beginCell().storeRef(memoCell).endCell();

        await stranger.send({
            to:       contract.address,
            value:    deposit,
            bounce:   true,
            sendMode: 1,            // pay fees separately
            body,
        });

        const commission  = deposit * 3n / 100n;
        const expectedNet = deposit - commission;

        const stored = await contract.getUnknownFund(0);
        expect(stored).toBe(expectedNet);

        // ---------- 2. –ü–µ—Ä–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç -------------------------------
        const balBefore = await stranger.getBalance();

        await contract.sendRefundUnknown(
            moderator.getSender(),
            /* key */ 0,
        );

        const storedAfter = await contract.getUnknownFund(0);
        expect(storedAfter).toBe(0n);

        const balAfter = await stranger.getBalance();
        expect(balAfter - balBefore).toBeGreaterThanOrEqual(expectedNet - toNano("0.05"));

        // ---------- 3. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç ‚Üí –æ—à–∏–±–∫–∞ -------------------
        const tx = await contract.sendRefundUnknown(
            moderator.getSender(),
            /* key */ 0,
        );

        expect(tx.transactions).toHaveTransaction({
            to:       contract.address,
            success:  false,
            exitCode: 120,
        });

        // ---------- 4. –í—ã–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º -------------------
        const modBalBefore = await moderator.getBalance();

        await contract.sendWithdrawCommissions(moderator.address);

        const modBalAfter = await moderator.getBalance();
        expect(modBalAfter - modBalBefore).toBeGreaterThanOrEqual(commission - toNano("0.05"));

        const { commissionsPool } = await contract.getContractData();
        expect(commissionsPool).toBe(0);
    });
});
const COMMISSION_RATE = 3n;           // 3 %
const DEAL_AMOUNTS = [ "0.5", "0.8", "1", "1.2", "0.7" ];   // TON
const N = DEAL_AMOUNTS.length;

describe("P2P ‚Äì –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π", () => {
    let blockchain: Blockchain;
    let moderator: SandboxContract<TreasuryContract>;
    let seller:    SandboxContract<TreasuryContract>;
    let buyer:     SandboxContract<TreasuryContract>;
    let contract:  SandboxContract<P2P>;

    beforeEach(async () => {
        blockchain = await Blockchain.create();

        moderator = await blockchain.treasury("moderator");
        seller    = await blockchain.treasury("seller");
        buyer     = await blockchain.treasury("buyer");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = blockchain.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    it("commissionsPool equals Œ£(amount)√ó3 %", async () => {
        let expectedCommission = 0n;

        for (let i = 0; i < N; i++) {
            const amt   = toNano(DEAL_AMOUNTS[i]);        // —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏
            const memo  = `bulk-test-${i}`;               // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π memo
            const extra = toNano("0.1");                  // –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å

            // ‚ë† create_deal (–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
            await contract.sendCreateDeal(
                moderator.getSender(),
                seller.address,
                buyer.address,
                amt,
                memo
            );

            // ‚ë° fund_deal  (–æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
            await contract.sendFundDeal(
                buyer.getSender(),
                memo,
                amt + extra
            );

            // –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–æ–º–∏—Å—Å–∏—é
            expectedCommission += (amt * COMMISSION_RATE) / 100n;
        }

        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const { commissionsPool } = await contract.getContractData();

        // commissionsPool –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JS-number, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ bigint
        const poolBig = BigInt(commissionsPool);

        expect(poolBig).toBe(expectedCommission);
    });
});
describe("P2P ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1 nanoTON", () => {
    let blockchain: Blockchain;
    let moderator: SandboxContract<TreasuryContract>;
    let seller:    SandboxContract<TreasuryContract>;
    let buyer:     SandboxContract<TreasuryContract>;
    let contract:  SandboxContract<P2P>;

    beforeEach(async () => {
        blockchain = await Blockchain.create();

        moderator = await blockchain.treasury("moderator");
        seller    = await blockchain.treasury("seller");
        buyer     = await blockchain.treasury("buyer");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = blockchain.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    it("creates & funds a deal on 1 nanoTON with zero commission", async () => {
        const amountNano = 1n;             // 1 nanoTON
        const memo       = "min-test";

        /* 1Ô∏è‚É£ create_deal */
        await contract.sendCreateDeal(
            moderator.getSender(),
            seller.address,
            buyer.address,
            amountNano,
            memo
        );

        /* 2Ô∏è‚É£ fund_deal  ‚Äì 0.03 TON –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏ –¥–ª—è msg + gas */
        const fundTx = await contract.sendFundDeal(
            buyer.getSender(),
            memo,
            toNano("0.03")
        );

        expect(fundTx.transactions).toHaveTransaction({
            from:    buyer.address,
            to:      contract.address,
            success: true,
            op:      5,
        });

        /* 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º funded-—Ñ–ª–∞–≥ –∏ –∫–æ–º–∏—Å—Å–∏—é */
        const info = await contract.getDealInfo(0);
        expect(info.amount).toBe(amountNano);
        expect(info.funded).toBe(1);

        const { commissionsPool } = await contract.getContractData();
        expect(BigInt(commissionsPool)).toBe(0n);
    });
});
describe("P2P ‚Äì –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", () => {
    let bc:         Blockchain;
    let moderator:  SandboxContract<TreasuryContract>;
    let stranger:   SandboxContract<TreasuryContract>;
    let seller:     SandboxContract<TreasuryContract>;
    let buyer:      SandboxContract<TreasuryContract>;
    let contract:   SandboxContract<P2P>;

    beforeEach(async () => {
        bc        = await Blockchain.create();
        moderator = await bc.treasury("moderator");
        stranger  = await bc.treasury("stranger");
        seller    = await bc.treasury("seller");
        buyer     = await bc.treasury("buyer");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = bc.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    test("CreateDeal –æ—Ç –Ω–µ-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚áí exit 999, —Å—Ç–µ–π—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è", async () => {
        const amount = toNano("1");
        const memo   = "no-mod";

        const tx = await contract.sendCreateDeal(
            stranger.getSender(),        // <-- –ù–ï –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
            seller.address,
            buyer.address,
            amount,
            memo
        );

        /* 1Ô∏è‚É£ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å */
        expect(tx.transactions).toHaveTransaction({
            from:    stranger.address,
            to:      contract.address,
            success: false,
            exitCode: 999
        });

        /* 2Ô∏è‚É£ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å */
        const { dealCounter, commissionsPool } = await contract.getContractData();
        expect(dealCounter).toBe(0);          // –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
        expect(commissionsPool).toBe(0);      // –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –ø—É—Å—Ç
    });

    test("FundDeal < amount+commission ‚áí exit 132, —Å—á—ë—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", async () => {
        const amount = toNano("2");     // 2 TON
        const memo   = "need-2.06";

        /* ‚ë† –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É */
        await contract.sendCreateDeal(
            moderator.getSender(),
            seller.address,
            buyer.address,
            amount,
            memo
        );

        /* ‚ë° –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ü–´–¢–ê–ï–¢–°–Ø –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—å—à–µ 2 TON + 3 % */
        const insufficient = toNano("2.03");  // –Ω—É–∂–Ω–æ ‚âà 2.06 TON

        const tx = await contract.sendFundDeal(
            buyer.getSender(),
            memo,
            insufficient
        );

        expect(tx.transactions).toHaveTransaction({
            from:    buyer.address,
            to:      contract.address,
            success: false,
            exitCode: 132
        });

        /* ‚ë¢ funded-—Ñ–ª–∞–≥ –≤—Å—ë –µ—â—ë 0, –∫–æ–º–∏—Å—Å–∏–π –Ω–µ—Ç */
        const info = await contract.getDealInfo(0);
        expect(info.funded).toBe(0);

        const { commissionsPool } = await contract.getContractData();
        expect(commissionsPool).toBe(0);
    });
});
describe("P2P ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ Fund / –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –Ω–µ–≤–µ—Ä–Ω—ã–π Resolve", () => {
    let bc:         Blockchain;
    let moderator:  SandboxContract<TreasuryContract>;
    let seller:     SandboxContract<TreasuryContract>;
    let buyer:      SandboxContract<TreasuryContract>;
    let contract:   SandboxContract<P2P>;

    beforeEach(async () => {
        bc        = await Blockchain.create();
        moderator = await bc.treasury("moderator");
        seller    = await bc.treasury("seller");
        buyer     = await bc.treasury("buyer");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = bc.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    test("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π FundDeal ‚áí 1-–π —É—Å–ø–µ—Ö, 2-–π exit 131", async () => {
        const amt  = toNano("2");
        const memo = "double-fund";

        /* ‚ë† CREATE  */
        await contract.sendCreateDeal(
            moderator.getSender(),
            seller.address,
            buyer.address,
            amt,
            memo
        );

        /* ‚ë° –ü–µ—Ä–≤—ã–π FUND ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (amt+3 %) */
        await contract.sendFundDeal(
            buyer.getSender(),
            memo,
            toNano("2.1")
        );

        /* –ø—É–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */
        const dataAfterFirst = await contract.getContractData();
        const pool1 = BigInt(dataAfterFirst.commissionsPool);

        /* ‚ë¢ –í—Ç–æ—Ä–æ–π FUND —Ç–æ–π –∂–µ —Å–¥–µ–ª–∫–∏ ‚Üí exit 131 */
        const tx = await contract.sendFundDeal(
            buyer.getSender(),
            memo,
            toNano("2.1")
        );

        expect(tx.transactions).toHaveTransaction({
            from:   buyer.address,
            to:     contract.address,
            success:false,
            exitCode:131
        });

        /* funded-—Ñ–ª–∞–≥ –æ—Å—Ç–∞–ª—Å—è 1, –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π –ø—É–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è */
        const info = await contract.getDealInfo(0);
        expect(info.funded).toBe(1);

        const dataAfterSecond = await contract.getContractData();
        expect(BigInt(dataAfterSecond.commissionsPool)).toBe(pool1);
    });

    test("ResolveDeal –î–û FundDeal ‚áí exit 111, funded=0", async () => {
        const amt  = toNano("1");
        const memo = "resolve-too-early";

        /* ‚ë† CREATE  (–±–µ–∑ funding) */
        await contract.sendCreateDeal(
            moderator.getSender(),
            seller.address,
            buyer.address,
            amt,
            memo
        );

        /* ‚ë° –ü—ã—Ç–∞–µ–º—Å—è resolve –≤ –ø–æ–ª—å–∑—É seller */
        const tx = await contract.sendResolveDealExternal(
            moderator.address,
            memo,
            true
        );

        expect(tx.transactions).toHaveTransaction({
            to:       contract.address,
            success:  false,
            exitCode: 111
        });

        /* funded-—Ñ–ª–∞–≥ –≤—Å—ë –µ—â—ë 0 */
        const info = await contract.getDealInfo(0);
        expect(info.funded).toBe(0);
    });

    test("ResolveDeal —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º memo ‚áí throw, state intact", async () => {
        const fakeMemo = "ghost-memo";
    
        /* ‚ë† external-–≤—ã–∑–æ–≤: –æ–∂–∏–¥–∞–µ–º –æ–±—â–∏–π Error */
        await expect(
            contract.sendResolveDealExternal(
                moderator.address,
                fakeMemo,
                true
            )
        ).rejects.toThrow();
    
        /* ‚ë° —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å */
        const { dealCounter, commissionsPool } = await contract.getContractData();
        expect(dealCounter).toBe(0);
        expect(commissionsPool).toBe(0);
    });    
});
describe("P2P ‚Äì –ø—É—Å—Ç–æ–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π op", () => {
    let bc:         Blockchain;
    let moderator:  SandboxContract<TreasuryContract>;
    let contract:   SandboxContract<P2P>;

    beforeEach(async () => {
        bc        = await Blockchain.create();
        moderator = await bc.treasury("moderator");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = bc.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* tests/P2P.test.ts--—Ñ—Ä–∞–≥–º–µ–Ω—Ç
 * –±–ª–æ–∫: ¬´P2P ‚Äì –ø—É—Å—Ç–æ–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π op¬ª
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 *  P2P ‚Äì –ø—É—Å—Ç–æ–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π op
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
describe("P2P ‚Äì –ø—É—Å—Ç–æ–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π op", () => {
    let bc:         Blockchain;
    let moderator:  SandboxContract<TreasuryContract>;
    let contract:   SandboxContract<P2P>;

    beforeEach(async () => {
        bc        = await Blockchain.create();
        moderator = await bc.treasury("moderator");

        const code = await compile("P2P");
        const cfg  = P2P.createFromConfig(moderator.address, code);
        contract   = bc.openContract(cfg);

        await contract.sendDeploy(moderator.getSender(), toNano("0.05"));
    });

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. withdraw –ø—Ä–∏ pool = 0 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    test("WithdrawCommissions –ø—Ä–∏ pool=0 ‚Üí –±–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è", async () => {
        // –ø—É–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç
        const { commissionsPool: pool0 } = await contract.getContractData();
        expect(pool0).toBe(0);
    
        const bal0 = await moderator.getBalance();
    
        /* –≤–Ω–µ—à–Ω–∏–π withdraw: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 0 TON,
           –≤–Ω—É—Ç—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç throw(160) ‚Üí Promise REJECTED            */
        await expect(
            contract.sendWithdrawCommissions(moderator.address)
        ).rejects.toThrow();                       // ‚Üê –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
        /* –ø–æ—Å–ª–µ –Ω–µ-—É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å */
        const bal1 = await moderator.getBalance();
        expect(bal1).toBe(bal0);                  // –¥–µ–Ω–µ–≥ –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å
    
        const { commissionsPool: pool1 } = await contract.getContractData();
        expect(pool1).toBe(0);                    // –ø—É–ª –æ—Å—Ç–∞–ª—Å—è –Ω—É–ª—ë–º
    });
});


});