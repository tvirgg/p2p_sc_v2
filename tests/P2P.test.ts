import { Address, beginCell, toNano } from "ton-core";
import { compile } from "@ton-community/blueprint";
import { Blockchain, SandboxContract, TreasuryContract } from "@ton-community/sandbox";
import { P2P } from "../wrappers/P2P";
import '@ton-community/test-utils';

describe("P2P Contract Sandbox", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;
    let moderatorWallet: SandboxContract<TreasuryContract>;

    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä—ã "–ø—Ä–æ–¥–∞–≤—Ü–∞" –∏ "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
    const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
    const BUYER  = Address.parse("0:2222000022220000222200002222000022220000222200002222000022220000");

    beforeEach(async () => {
        // 1) —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        blockchain = await Blockchain.create();
        blockchain.verbosity = {
            blockchainLogs: true,
            vmLogs: "vm_logs_full",
            debugLogs: true,
            print: false
        };

        // 2) —Å–æ–∑–¥–∞—ë–º "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" (–∫–æ—à–µ–ª—ë–∫)
        moderatorWallet = await blockchain.treasury("moderator");

        // 3) –∫–æ–º–ø–∏–ª–∏–º P2P.fc
        const code = await compile("P2P");

        // 4) —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const p2pConfig = P2P.createFromConfig(moderatorWallet.address, code, 0);

        // 5) "–û—Ç–∫—Ä—ã–≤–∞–µ–º" —á–µ—Ä–µ–∑ sandbox
        contract = blockchain.openContract(p2pConfig);

        // 6) –î–µ–ø–ª–æ–∏–º
        await contract.sendDeploy(
            moderatorWallet.getSender(),
            toNano("0.05")
        );
        
        console.log("üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω");
    });

    it("should create a deal", async () => {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        const dealAmount = toNano("2");
        const memoText = "1236";

        // –°—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç memoCell (–¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞)
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const memoHash = memoCell.hash().toString("hex");
        console.log("üîñ Memo Hash:", memoHash);

        console.log("üèÅ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å:", contract.address.toString());
        console.log("üèÅ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å:", moderatorWallet.address.toString());

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û:", contractDataBefore);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        const moderatorAddress = await contract.getModeratorAddress();
        console.log("üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:", moderatorAddress.toString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,                     // seller
            BUYER,                      // buyer
            dealAmount,                 // amount
            memoText                    // memo
        );
        //console.log(createResult.transactions);

        expect(createResult.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to: contract.address,
            success: true,
            op: 1,
        });
        console.log("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞");

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfter = await contract.getContractData();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï:", contractDataAfter);

        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
        const dealCounter = await contract.getDealCounter();
        console.log("üìä dealCounter =", dealCounter);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å ID 0
        try {
            const provider = blockchain.provider(contract.address);
            const dealExists = await contract.debugDealExists(provider, 0);
            console.log("üîç –°–¥–µ–ª–∫–∞ —Å ID 0 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", dealExists);

            // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const rawData = await contract.debugGetRawData(provider);
            console.log("üîÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", rawData);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", error);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º getDealInfo(0)
        const infoBefore = await contract.getDealInfo(0);
        console.log("üßÆ Deal Info (index=0) =", infoBefore);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        try {
            const fullDealInfo = await contract.getFullDealInfo(0);
            console.log("üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:", fullDealInfo);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ:", error);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è
        expect(dealCounter).toBe(1);

        // –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ amount = dealAmount, funded=0
        expect(infoBefore.amount.toString()).toBe(dealAmount.toString());
        expect(infoBefore.funded).toBe(0);
    });

    it("should create and fund a deal", async () => {
        const dealAmount = toNano("2");
        const memoText = "DEAL:1";

        const buyerWallet = await blockchain.treasury("buyer");

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û:", contractDataBefore);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        const moderatorAddress = await contract.getModeratorAddress();
        console.log("üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:", moderatorAddress.toString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        console.log("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞");

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfterCreate = await contract.getContractData();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è:", contractDataAfterCreate);

        const dealCounterAfterCreate = await contract.getDealCounter();
        console.log("üìà Deal counter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:", dealCounterAfterCreate);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoBeforeFunding = await contract.getDealInfo(0);
        console.log("üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:", {
            amount: dealInfoBeforeFunding.amount.toString(),
            funded: dealInfoBeforeFunding.funded
        });

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullDealInfoBeforeFunding = await contract.getFullDealInfo(0);
        console.log("üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:", fullDealInfoBeforeFunding);

        // –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1") // —á—É—Ç—å –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—é
        );
        console.log("üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞");

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfterFunding = await contract.getContractData();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:", contractDataAfterFunding);

        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const dealInfo = await contract.getDealInfo(0);
        console.log("üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:", {
            amount: dealInfo.amount.toString(),
            funded: dealInfo.funded
        });

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullDealInfoAfterFunding = await contract.getFullDealInfo(0);
        console.log("üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:", fullDealInfoAfterFunding);

        expect(dealInfo.amount.toString()).toBe(dealAmount.toString());
        expect(dealInfo.funded).toBe(1);
    });
});
