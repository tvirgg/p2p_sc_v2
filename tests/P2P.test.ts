import { Address, beginCell, toNano, Dictionary, Cell, Slice } from "ton-core";
import { compile } from "@ton-community/blueprint";
import { Blockchain, SandboxContract, TreasuryContract } from "@ton-community/sandbox";
import { P2P } from "../wrappers/P2P";
import '@ton-community/test-utils';

// Define constants from the contract
const COMMISSION_WITH_MEMO = 3; // 3% commission for deals with memo

describe("P2P Contract Sandbox", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;
    let moderatorWallet: SandboxContract<TreasuryContract>;

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hex –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
    // –∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ —á–µ—Ä–µ–∑ sandbox.
    const BUYER_HEX  = "0:2222000022220000222200002222000022220000222200002222000022220000";

    beforeEach(async () => {
        // 1) –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        blockchain = await Blockchain.create();
        blockchain.verbosity = {
            blockchainLogs: true,
            vmLogs: "vm_logs",
            debugLogs: true,
            print: false,
        };

        // 2) –°–æ–∑–¥–∞—ë–º "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" (–∫–æ—à–µ–ª—ë–∫)
        moderatorWallet = await blockchain.treasury("moderator");

        // 3) –ö–æ–º–ø–∏–ª–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, P2P.fc)
        const code = await compile("P2P");

        // 4) –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É
        const p2pConfig = P2P.createFromConfig(moderatorWallet.address, code, 0);

        // 5) "–û—Ç–∫—Ä—ã–≤–∞–µ–º" –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ sandbox
        contract = blockchain.openContract(p2pConfig);

        // 6) –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        await contract.sendDeploy(
            moderatorWallet.getSender(),
            toNano("0.05")
        );
        
        process.stdout.write(`üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${contract.address.toString()}\n`);
    });

    it("should create a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "1236";

        // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à memoCell (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const memoHash = memoCell.hash().toString("hex");
        process.stdout.write(`üîñ Memo Hash: ${memoHash}\n`);

        process.stdout.write(`üèÅ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å: ${contract.address.toString()}\n`);
        process.stdout.write(`üèÅ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å: ${moderatorWallet.address.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        expect(createResult.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to: contract.address,
            success: true,
            op: 1,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfter = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï: ${JSON.stringify(contractDataAfter)}\n`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
        const dealCounter = await contract.getDealCounter();
        process.stdout.write(`üìä dealCounter = ${dealCounter}\n`);
        expect(dealCounter).toBe(1);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º getDealInfo(0)
        const infoBefore = await contract.getDealInfo(0);
        process.stdout.write(`üßÆ Deal Info (index=0) = ${JSON.stringify({
            ...infoBefore,
            amount: infoBefore.amount
        }, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);
        expect(infoBefore.amount.toString()).toBe(dealAmount.toString());
        expect(infoBefore.funded).toBe(0);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        try {
            const fullDealInfo = await contract.getFullDealInfo(0);
            process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ: ${JSON.stringify(fullDealInfo)}\n`);
        } catch (error) {
            process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ: ${error}\n`);
        }
    });

    it("should create and fund a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "DEAL:1";

        // –°–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—ë–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const buyerWallet = await blockchain.treasury("buyer");

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceBefore = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceBefore.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function printAllDebugLogs(transaction: any): void {
            if (!transaction) return;
            
            // –í—ã–≤–æ–¥ debug logs –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (transaction.debugLogs) {
                process.stdout.write(`üìã DEBUG LOGS (${transaction.address || 'unknown'}):\n`);
                transaction.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (transaction.children && Array.isArray(transaction.children)) {
                transaction.children.forEach((child: any) => printAllDebugLogs(child));
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        printAllDebugLogs(createResult);
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfterCreate = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterCreate)}\n`);

        const dealCounterAfterCreate = await contract.getDealCounter();
        process.stdout.write(`üìà Deal counter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${dealCounterAfterCreate}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoBeforeFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoBeforeFunding.amount,
            funded: dealInfoBeforeFunding.funded
        }, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullDealInfoBeforeFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoBeforeFunding, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1") // —á—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è —É—á—ë—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceAfter.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const contractDataAfterFunding = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterFunding)}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoAfterFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoAfterFunding.amount.toString(),
            funded: dealInfoAfterFunding.funded
        })}\n`);
        expect(dealInfoAfterFunding.amount.toString()).toBe(dealAmount.toString());
        expect(dealInfoAfterFunding.funded).toBe(1);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const fullDealInfoAfterFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoAfterFunding, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);
    });

    it("should resolve deal in favor of seller", async () => {
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É.
        const sellerWallet = await blockchain.treasury("seller");
        const buyerWallet = await blockchain.treasury("buyer");

        process.stdout.write(`üèÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –∞–¥—Ä–µ—Å: ${sellerWallet.address.toString()}\n`);
        process.stdout.write(`üèÅ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å: ${buyerWallet.address.toString()}\n`);
        const dealAmount = toNano("2");
        const memoText = "deal-to-seller";
        const buyerBalanceStart = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance START resolution: ${buyerBalanceStart.toString()}\n`);
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ—Ä—ë–º –∏–∑ –∫–æ—à–µ–ª—å–∫–∞)
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            sellerWallet.address,
            buyerWallet.address,
            dealAmount,
            memoText
        );
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function extractAndPrintAllDebugLogs(obj: any, visited = new Set()): void {
            if (!obj || typeof obj !== 'object' || visited.has(obj)) return;
            visited.add(obj);
        
            if (typeof obj.debugLogs === 'string') {
                process.stdout.write(`üìã DEBUG LOGS:\n`);
                obj.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
        
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const val = obj[key];
        
                    if (Array.isArray(val)) {
                        val.forEach((child) => extractAndPrintAllDebugLogs(child, visited));
                    } else if (typeof val === 'object' && val !== null) {
                        extractAndPrintAllDebugLogs(val, visited);
                    }
                }
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        extractAndPrintAllDebugLogs(createResult);
        
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1")
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);
        const buyerBalanceSend = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER SEND: ${buyerBalanceSend.toString()}\n`);
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceBefore = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance BEFORE resolution: ${sellerBalanceBefore.toString()}\n`);

        // –®–∞–≥ 3: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (approvePayment = true)
        const resolveResult = await contract.sendResolveDealExternal( // Call the corrected function
            moderatorWallet.address,  // Moderator's address to be put in the message body
            memoText,                 // The crucial memo
            true                     
        );

        // Log the full resolveResult object for debugging
        if (resolveResult && Array.isArray(resolveResult.transactions) && resolveResult.transactions.length > 0) {
            // 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const firstTransaction = resolveResult.transactions[0];
        
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debugLogs –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/null/undefined
            if ('debugLogs' in firstTransaction && firstTransaction.debugLogs) {
            // 4. –í—ã–≤–æ–¥–∏–º debugLogs –∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const debugLogs = firstTransaction.debugLogs.split('\n');
            debugLogs.forEach((logLine) => {
                process.stdout.write(`üìã Debug Log Line: ${logLine}\n`);
            });
            } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ debugLogs –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            process.stdout.write(`üìã Debug Logs: null or empty in the first transaction\n`);
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
            process.stdout.write(`üìã Debug Logs: No transactions found or transactions array is empty\n`);
        }
        expect(resolveResult.transactions).toHaveTransaction({
            to: contract.address,
            on: contract.address,
            success: true,
            op: 2,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceAfter = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance AFTER resolution: ${sellerBalanceAfter.toString()}\n`);
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER resolution: ${buyerBalanceAfter.toString()}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
        const margin = toNano("0.03"); // Allowable margin for transaction fees
        expect(sellerBalanceAfter - sellerBalanceBefore + margin).toBeGreaterThanOrEqual(dealAmount);
    });
    it("should resolve deal in favor of buyer", async () => {
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É.
        const sellerWallet = await blockchain.treasury("seller");
        const buyerWallet = await blockchain.treasury("buyer");

        process.stdout.write(`üèÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –∞–¥—Ä–µ—Å: ${sellerWallet.address.toString()}\n`);
        process.stdout.write(`üèÅ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å: ${buyerWallet.address.toString()}\n`);
        const dealAmount = toNano("2");
        const memoText = "deal-to-seller";
        const buyerBalanceStart = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance START resolution: ${buyerBalanceStart.toString()}\n`);
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ—Ä—ë–º –∏–∑ –∫–æ—à–µ–ª—å–∫–∞)
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            sellerWallet.address,
            buyerWallet.address,
            dealAmount,
            memoText
        );
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ debug logs –∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function extractAndPrintAllDebugLogs(obj: any, visited = new Set()): void {
            if (!obj || typeof obj !== 'object' || visited.has(obj)) return;
            visited.add(obj);
        
            if (typeof obj.debugLogs === 'string') {
                process.stdout.write(`üìã DEBUG LOGS:\n`);
                obj.debugLogs.split('\n').forEach((line: string) => {
                    if (line.trim()) {
                        process.stdout.write(`    ${line}\n`);
                    }
                });
            }
        
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const val = obj[key];
        
                    if (Array.isArray(val)) {
                        val.forEach((child) => extractAndPrintAllDebugLogs(child, visited));
                    } else if (typeof val === 'object' && val !== null) {
                        extractAndPrintAllDebugLogs(val, visited);
                    }
                }
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ debug logs –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        process.stdout.write(`üîç –í–°–ï DEBUG LOGS –î–õ–Ø createResult:\n`);
        extractAndPrintAllDebugLogs(createResult);
        
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1")
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);
        const buyerBalanceSend = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER SEND: ${buyerBalanceSend.toString()}\n`);
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceBefore = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance BEFORE resolution: ${sellerBalanceBefore.toString()}\n`);

        // –®–∞–≥ 3: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (approvePayment = true)
        const resolveResult = await contract.sendResolveDealExternal( // Call the corrected function
            moderatorWallet.address,  // Moderator's address to be put in the message body
            memoText,                 // The crucial memo
            false                     
        );

        // Log the full resolveResult object for debugging
        if (resolveResult && Array.isArray(resolveResult.transactions) && resolveResult.transactions.length > 0) {
            // 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const firstTransaction = resolveResult.transactions[0];
        
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debugLogs –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/null/undefined
            if ('debugLogs' in firstTransaction && firstTransaction.debugLogs) {
            // 4. –í—ã–≤–æ–¥–∏–º debugLogs –∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const debugLogs = firstTransaction.debugLogs.split('\n');
            debugLogs.forEach((logLine) => {
                process.stdout.write(`üìã Debug Log Line: ${logLine}\n`);
            });
            } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ debugLogs –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            process.stdout.write(`üìã Debug Logs: null or empty in the first transaction\n`);
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
            process.stdout.write(`üìã Debug Logs: No transactions found or transactions array is empty\n`);
        }
        expect(resolveResult.transactions).toHaveTransaction({
            to: contract.address,
            on: contract.address,
            success: true,
            op: 2,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceAfter = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance AFTER resolution: ${sellerBalanceAfter.toString()}\n`);
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`Buyer balance AFTER resolution: ${buyerBalanceAfter.toString()}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª –±–æ–ª—å—à–µ, —á–µ–º –∫–æ–º–∏—Å—Å–∏—é + —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        const commission = (dealAmount * BigInt(COMMISSION_WITH_MEMO)) / 100n; // 3% commission
        const margin = toNano("0.05"); // Allowable margin for transaction fees
        expect(buyerBalanceStart - buyerBalanceAfter).toBeLessThanOrEqual(commission + margin);
    });
    it("should allow moderator to withdraw commissions", async () => {
        const moderatorBalanceBefore = await moderatorWallet.getBalance();
        process.stdout.write(`üíº –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –î–û —Å–Ω—è—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–π: ${moderatorBalanceBefore.toString()}\n`);
    
        // –®–∞–≥ 1: —Å–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º –µ–µ, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –∫–æ–º–∏—Å—Å–∏–∏
        const SELLER = await blockchain.treasury("seller");
        const BUYER = await blockchain.treasury("buyer");
        const memoText = "withdraw-test";
        const dealAmount = toNano("2");
    
        await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER.address,
            BUYER.address,
            dealAmount,
            memoText
        );
    
        await contract.sendFundDeal(
            BUYER.getSender(),
            memoText,
            toNano("2.1") // —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        );
    
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const contractDataBeforeWithdraw = await contract.getContractData();
        const commissionsBefore = contractDataBeforeWithdraw.commissionsPool;
        process.stdout.write(`üè¶ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –î–û —Å–Ω—è—Ç–∏—è: ${commissionsBefore.toString()}\n`);
        expect(commissionsBefore).toBeGreaterThan(0n);
    
        // –®–∞–≥ 2: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é
        const withdrawAmount = toNano("0.03");
        const withdrawResult = await contract.sendWithdrawCommissions( // Call the corrected function
            moderatorWallet.address                
        );
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        expect(withdrawResult.transactions).toHaveTransaction({
            //to: contract.address,
            //on: contract.address,
            success: true,
            op: 4,
        });
        process.stdout.write(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n`);
    
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è
        const contractDataAfterWithdraw = await contract.getContractData();
        const commissionsAfter = contractDataAfterWithdraw.commissionsPool;
        process.stdout.write(`üè¶ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –ü–û–°–õ–ï —Å–Ω—è—Ç–∏—è: ${commissionsAfter.toString()}\n`);
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å
        expect(commissionsAfter).toBeLessThan(commissionsBefore);
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫)
        const moderatorBalanceAfter = await moderatorWallet.getBalance();
        const delta = moderatorBalanceAfter - moderatorBalanceBefore;
        process.stdout.write(`üíº –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ü–û–°–õ–ï: ${moderatorBalanceAfter.toString()}\n`);
        process.stdout.write(`üìà Œî –ë–∞–ª–∞–Ω—Å: ${delta.toString()}\n`);
    
        const minimumExpected = toNano("0.002"); // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—É–º–Ω–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
        expect(delta).toBeGreaterThanOrEqual(minimumExpected);

        expect(commissionsAfter).toBe(0);
    });
});

/**
 * –¢–µ—Å—Ç ¬´Refund unknown funds¬ª
 * -------------------------------------------------------
 * Happy‚Äëpath –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—ë—Ä—Ç–∫–∏ —É–∂–µ –ø–æ–∫—Ä—ã—Ç—ã, ‚Äî
 * –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å (treasury‚Äë–∫–æ—à–µ–ª—å–∫–∏ + wrapper),
 * –Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö ¬´—Å—ã—Ä–æ–º—è—Ç–Ω—ã—Ö¬ª —Ö–∞–∫–æ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ.
 */

/**
 * –¢–µ—Å—Ç ¬´Refund unknown funds¬ª —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
 * -------------------------------------------------------
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∑–∞–ª—ë—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Üí –∫–æ–º–∏—Å—Å–∏—è ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–∞
 */

describe("P2P ‚Äì refund unknown funds", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;
    let moderatorWallet: SandboxContract<TreasuryContract>;

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ *
     *  ‚ù∂‚ÄÇ–°—Ç–∞—Ä—Ç—É–µ–º Sandbox –∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º P2P c –∫–æ—à–µ–ª—å–∫–æ–º-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º     *
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    beforeEach(async () => {
        blockchain = await Blockchain.create();
        blockchain.verbosity = {
            blockchainLogs: false,
            vmLogs: "vm_logs",
            debugLogs: true,
            print: false,
        };

        moderatorWallet = await blockchain.treasury("moderator");

        const code   = await compile("P2P");
        const p2pCfg = P2P.createFromConfig(moderatorWallet.address, code, 0);

        contract = blockchain.openContract(p2pCfg);
        await contract.sendDeploy(moderatorWallet.getSender(), toNano("0.05"));
    });

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ *
     *  ‚ù∑‚ÄÇ–ü—Ä–æ–≤–µ—Ä—è–µ–º: –∑–∞–ª—ë—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Üí –∫–æ–º–∏—Å—Å–∏—è ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–∞          *
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    it("stores a stray payment in unknown_funds and refunds it back", async () => {

        /* === 2.1 ¬´–ó–∞–ª—ë—Ç–Ω—ã–π¬ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ ====================== */

        const stranger = await blockchain.treasury("stranger");
        const deposit  = toNano("1");               // 1 TON
        const memoCell = beginCell().storeStringTail("ghost-memo").endCell();
        const body     = beginCell().storeRef(memoCell).endCell();

        const balStrangerBefore = await stranger.getBalance();
        process.stdout.write(`üí≥ Stranger before send: ${balStrangerBefore}\n`);

        await stranger.send({
            to:   contract.address,
            value: deposit,
            bounce: true,
            body,
            /* –í–ê–ñ–ù–û: –≥–∞–∑ —Å–ø–∏—Å—ã–≤–∞–µ–º –û–¢–î–ï–õ–¨–ù–û, –∏–Ω–∞—á–µ –¥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ–ª–µ—Ç–∏—Ç
               –º–µ–Ω—å—à–µ 1 TON –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–¥—ë—Ç                           */
               sendMode: 1,          // –≤–º–µ—Å—Ç–æ SendMode.PAY_GAS_SEPARATELY
        });

        process.stdout.write("üí∏ Stray deposit sent\n");

        /* === 2.2 –ü—Ä–æ–≤–µ—Ä—è–µ–º unknown_funds =============================== */

        // Get the actual value stored in unknown_funds
        const uf0 = await contract.getUnknownFund(0);
        process.stdout.write(`üîç unknown_funds[0] = ${uf0}\n`);
        
        // Calculate expected value (3% commission)
        const expectedCommission = deposit * 3n / 100n;
        const expectedNet = deposit - expectedCommission;
        process.stdout.write(`üí∞ Deposit: ${deposit}\n`);
        process.stdout.write(`üí∏ Expected commission (3%): ${expectedCommission}\n`);
        process.stdout.write(`üíµ Expected net: ${expectedNet}\n`);
        
        // Now we expect the correct value after fixing the contract
        // The value should be the deposit minus the 3% commission
        expect(uf0).toBe(expectedNet);

        /* === 2.3 –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç refund =============================== */

        const balBeforeRefund = await stranger.getBalance();
        process.stdout.write(`üí∞ Stranger balance BEFORE refund: ${balBeforeRefund}\n`);

        // Print debug info about the unknown fund before refund
        const ufBefore = await contract.getUnknownFund(0);
        process.stdout.write(`üîç Unknown fund BEFORE refund: ${ufBefore}\n`);

        // Get contract data before refund
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä Contract data BEFORE refund: ${JSON.stringify(contractDataBefore, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        const refundTx = await contract.sendRefundUnknown(
            moderatorWallet.getSender(),
            /* key = */ 0
        );

        // Print debug logs from the refund transaction
        if (refundTx && Array.isArray(refundTx.transactions) && refundTx.transactions.length > 0) {
            const firstTransaction = refundTx.transactions[0];
            if ('debugLogs' in firstTransaction && firstTransaction.debugLogs) {
                const debugLogs = firstTransaction.debugLogs.split('\n');
                debugLogs.forEach((logLine) => {
                    process.stdout.write(`üìã Refund Debug Log: ${logLine}\n`);
                });
            }
        }

        expect(refundTx.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to:   contract.address,
            op:   3,
            success: true,
        });
        process.stdout.write("üîÑ Refund executed\n");

        /* === 2.4 –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å ====================== */

        const ufAfter = await contract.getUnknownFund(0);
        process.stdout.write(`üîç Unknown fund AFTER refund: ${ufAfter}\n`);
        expect(ufAfter).toBe(0n);

        // Get contract data after refund
        const contractDataAfter = await contract.getContractData();
        process.stdout.write(`üìä Contract data AFTER refund: ${JSON.stringify(contractDataAfter, (key, value) => typeof value === 'bigint' ? value.toString() : value)}\n`);

        const balAfterRefund = await stranger.getBalance();
        process.stdout.write(`üí∞ Stranger balance AFTER refund: ${balAfterRefund}\n`);
        const delta = balAfterRefund - balBeforeRefund;
        process.stdout.write(`üìà Balance delta: ${delta}\n`);

        // Now we expect the balance to increase after the refund
        process.stdout.write(`üíµ Expected minimum refund: ${expectedNet - toNano("0.02")}\n`);
        
        // Check that the unknown fund entry is removed
        expect(ufAfter).toBe(0n);
        
        // Check that the balance increased by approximately the expected net amount
        // Allow for some gas fees
        expect(delta).toBeGreaterThan(expectedNet - toNano("0.05"));

        /* === 2.5 –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º ======================= */
        
        // The contract should now throw an exception when trying to refund a non-existent entry
        // We'll use try/catch to handle the expected exception
        try {
            await contract.sendRefundUnknown(
                moderatorWallet.getSender(),
                /* key = */ 0
            );
            // If we get here, the test should fail because an exception was expected
            process.stdout.write("‚ùå Second refund did not throw an exception as expected\n");
            expect(false).toBe(true); // Force test to fail
        } catch (error) {
            // This is expected behavior - the contract should throw an exception
            process.stdout.write(`‚úÖ Second refund correctly threw an exception: ${error}\n`);
        }
        
        // Verify the unknown fund is still 0
        const ufAfterSecondRefund = await contract.getUnknownFund(0);
        process.stdout.write(`üîç Unknown fund AFTER second refund attempt: ${ufAfterSecondRefund}\n`);
        expect(ufAfterSecondRefund).toBe(0n);
        
        process.stdout.write("‚úÖ Second refund completed\n");
    });
});
