import { Address, beginCell, toNano } from "ton-core";
import { compile } from "@ton-community/blueprint";
import { Blockchain, SandboxContract, TreasuryContract } from "@ton-community/sandbox";
import { P2P } from "../wrappers/P2P";
import '@ton-community/test-utils';

describe("P2P Contract Sandbox", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;
    let moderatorWallet: SandboxContract<TreasuryContract>;

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hex –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
    // –∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ —á–µ—Ä–µ–∑ sandbox.
    const BUYER_HEX  = "0:2222000022220000222200002222000022220000222200002222000022220000";

    beforeEach(async () => {
        // 1) –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        blockchain = await Blockchain.create();
        blockchain.verbosity = {
            blockchainLogs: true,
            vmLogs: "vm_logs_full",
            debugLogs: true,
            print: false,
        };

        // 2) –°–æ–∑–¥–∞—ë–º "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" (–∫–æ—à–µ–ª—ë–∫)
        moderatorWallet = await blockchain.treasury("moderator");

        // 3) –ö–æ–º–ø–∏–ª–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, P2P.fc)
        const code = await compile("P2P");

        // 4) –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É
        const p2pConfig = P2P.createFromConfig(moderatorWallet.address, code, 0);

        // 5) "–û—Ç–∫—Ä—ã–≤–∞–µ–º" –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ sandbox
        contract = blockchain.openContract(p2pConfig);

        // 6) –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        await contract.sendDeploy(
            moderatorWallet.getSender(),
            toNano("0.05")
        );
        
        process.stdout.write(`üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${contract.address.toString()}\n`);
    });

    it("should create a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "1236";

        // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à memoCell (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const memoHash = memoCell.hash().toString("hex");
        process.stdout.write(`üîñ Memo Hash: ${memoHash}\n`);

        process.stdout.write(`üèÅ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å: ${contract.address.toString()}\n`);
        process.stdout.write(`üèÅ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å: ${moderatorWallet.address.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        const createResult = await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        expect(createResult.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to: contract.address,
            success: true,
            op: 1,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfter = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï: ${JSON.stringify(contractDataAfter)}\n`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
        const dealCounter = await contract.getDealCounter();
        process.stdout.write(`üìä dealCounter = ${dealCounter}\n`);
        expect(dealCounter).toBe(1);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º getDealInfo(0)
        const infoBefore = await contract.getDealInfo(0);
        process.stdout.write(`üßÆ Deal Info (index=0) = ${JSON.stringify(infoBefore)}\n`);
        expect(infoBefore.amount.toString()).toBe(dealAmount.toString());
        expect(infoBefore.funded).toBe(0);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        try {
            const fullDealInfo = await contract.getFullDealInfo(0);
            process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ: ${JSON.stringify(fullDealInfo)}\n`);
        } catch (error) {
            process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ: ${error}\n`);
        }
    });

    it("should create and fund a deal", async () => {
        const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
        const BUYER = Address.parse(BUYER_HEX);
        const dealAmount = toNano("2");
        const memoText = "DEAL:1";

        // –°–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—ë–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const buyerWallet = await blockchain.treasury("buyer");

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceBefore = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceBefore.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataBefore = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –î–û: ${JSON.stringify(contractDataBefore)}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        const moderatorAddress = await contract.getModeratorAddress();
        process.stdout.write(`üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${moderatorAddress.toString()}\n`);
        expect(moderatorAddress.equals(moderatorWallet.address)).toBe(true);

        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
        await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            SELLER,
            BUYER,
            dealAmount,
            memoText
        );
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const contractDataAfterCreate = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterCreate)}\n`);

        const dealCounterAfterCreate = await contract.getDealCounter();
        process.stdout.write(`üìà Deal counter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${dealCounterAfterCreate}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoBeforeFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoBeforeFunding.amount.toString(),
            funded: dealInfoBeforeFunding.funded
        })}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullDealInfoBeforeFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoBeforeFunding)}\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1") // —á—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è —É—á—ë—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const buyerBalanceAfter = await buyerWallet.getBalance();
        process.stdout.write(`üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${buyerBalanceAfter.toString()}\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const contractDataAfterFunding = await contract.getContractData();
        process.stdout.write(`üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(contractDataAfterFunding)}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dealInfoAfterFunding = await contract.getDealInfo(0);
        process.stdout.write(`üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify({
            amount: dealInfoAfterFunding.amount.toString(),
            funded: dealInfoAfterFunding.funded
        })}\n`);
        expect(dealInfoAfterFunding.amount.toString()).toBe(dealAmount.toString());
        expect(dealInfoAfterFunding.funded).toBe(1);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const fullDealInfoAfterFunding = await contract.getFullDealInfo(0);
        process.stdout.write(`üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${JSON.stringify(fullDealInfoAfterFunding)}\n`);
    });

    it("should resolve deal in favor of seller", async () => {
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É.
        const sellerWallet = await blockchain.treasury("seller");
        const buyerWallet = await blockchain.treasury("buyer");
        const dealAmount = toNano("2");
        const memoText = "deal-to-seller";

        // –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ—Ä—ë–º –∏–∑ –∫–æ—à–µ–ª—å–∫–∞)
        await contract.sendCreateDeal(
            moderatorWallet.getSender(),
            sellerWallet.address,
            Address.parse(BUYER_HEX),
            dealAmount,
            memoText
        );
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –®–∞–≥ 2: —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        await contract.sendFundDeal(
            buyerWallet.getSender(),
            memoText,
            toNano("2.1")
        );
        process.stdout.write(`üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceBefore = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance BEFORE resolution: ${sellerBalanceBefore.toString()}\n`);

        // –®–∞–≥ 3: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (approvePayment = true)
        const resolveResult = await contract.sendResolveDeal(
            moderatorWallet.getSender(),
            memoText,
            true  // —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞
        );
        expect(resolveResult.transactions).toHaveTransaction({
            from: moderatorWallet.address,
            to: contract.address,
            success: true,
            op: 2,
        });
        process.stdout.write(`‚úÖ –°–¥–µ–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞\n`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const sellerBalanceAfter = await sellerWallet.getBalance();
        process.stdout.write(`Seller balance AFTER resolution: ${sellerBalanceAfter.toString()}\n`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
        expect(sellerBalanceAfter - sellerBalanceBefore).toBeGreaterThanOrEqual(dealAmount);
    });
});
