import { Address, beginCell, toNano } from "ton-core";
import { compile } from "@ton-community/blueprint";
import { Blockchain, SandboxContract } from "@ton-community/sandbox";
import { P2P } from "../wrappers/P2P";

describe("P2P Contract Sandbox", () => {
    let blockchain: Blockchain;
    let contract: SandboxContract<P2P>;

    let MODERATOR: Address;
    const SELLER = Address.parse("0:1111000011110000111100001111000011110000111100001111000011110000");
    const BUYER  = Address.parse("0:2222000022220000222200002222000022220000222200002222000022220000");

    beforeEach(async () => {
        // –°–æ–∑–¥–∞—ë–º –ø–µ—Å–æ—á–Ω–∏—Ü—É
        blockchain = await Blockchain.create();

        // –ö–æ—à–µ–ª—ë–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        const moderatorWallet = await blockchain.treasury("moderator");
        MODERATOR = moderatorWallet.address;

        // –ö–æ–º–ø–∏–ª–∏–º —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç
        const code = await compile("P2P");

        // –°–æ–∑–¥–∞—ë–º P2P-—ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const p2pContract = P2P.createFromConfig(MODERATOR, code);
        contract = blockchain.openContract(p2pContract);

        // –î–µ–ø–ª–æ–∏–º
        await contract.sendDeploy(moderatorWallet, toNano("0.05"));
        console.log("üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω");
    });

    it("should create and fund a deal", async () => {
        const dealAmount = toNano("1");
        const memoText = "DEAL:1";

        // –°—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç memoCell (–¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞)
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const memoHash = memoCell.hash().toString("hex");
        console.log("üîñ Memo Hash:", memoHash);

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ Sandbox
        const moderatorWallet = await blockchain.treasury("moderator");
        const buyerWallet     = await blockchain.treasury("buyer");

        // === –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ===
        try {
            await contract.sendCreateDeal(
                moderatorWallet,
                MODERATOR,
                SELLER,
                BUYER,
                dealAmount,
                memoText
            );
        } catch (e) {
            console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", e);
            throw e;
        }
        console.log("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞");

        const dealCounterAfterCreate = await contract.getDealCounter();
        console.log("üìà Deal counter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:", dealCounterAfterCreate);

        // === –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ===
        await contract.sendFundDeal(
            buyerWallet,
            memoText,
            toNano("1.05") // —á—É—Ç—å –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—é
        );
        console.log("üí∞ –°–¥–µ–ª–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞");

        // === –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ ===
        const dealInfo = await contract.getDealInfo(0);
        console.log("üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:", {
            amount: dealInfo.amount.toString(),
            funded: dealInfo.funded
        });

        expect(dealInfo.amount.toString()).toBe(dealAmount.toString());
        expect(dealInfo.funded).toBe(1);
    });
});
