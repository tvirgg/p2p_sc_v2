import {
    Address,
    beginCell,
    Cell,
    toNano,
    TonClient,
    SendMode,
    internal,
    external
} from "ton";
import { mnemonicToWalletKey } from "ton-crypto";
import { WalletContractV4 } from "ton";
import { getHttpEndpoint } from "@orbs-network/ton-access";
import * as dotenv from "dotenv";

dotenv.config();

// –ê–¥—Ä–µ—Å –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const CONTRACT_ADDR = "EQAKxreVyMzGlahLmkfX0iQayBGTQqL5XwuFwgVBJVPO16Jw";

async function main() {
    console.log("üöÄ Initializing...");

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ testnet
    const endpoint = await getHttpEndpoint({ network: "testnet" });
    const client = new TonClient({ endpoint });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—ë–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const moderatorMnemonic = process.env.WALLET_MNEMONIC;
    if (!moderatorMnemonic) throw new Error("WALLET_MNEMONIC not set");
    const moderatorKey = await mnemonicToWalletKey(moderatorMnemonic.split(" "));
    const moderatorWallet = WalletContractV4.create({ publicKey: moderatorKey.publicKey, workchain: 0 });
    const moderatorContract = client.open(moderatorWallet);
    const moderatorAddress = moderatorWallet.address;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—ë–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const buyerMnemonic = process.env.BUYER_MNEMONIC || moderatorMnemonic; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–Ω–µ–º–æ–Ω–∏–∫, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ
    const buyerKey = await mnemonicToWalletKey(buyerMnemonic.split(" "));
    const buyerWallet = WalletContractV4.create({ publicKey: buyerKey.publicKey, workchain: 0 });
    const buyerContract = client.open(buyerWallet);
    const buyerAddress = buyerWallet.address;

    // –ê–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∞–¥—Ä–µ—Å)
    const sellerAddress = Address.parse(process.env.SELLER_ADDR || "0:1111000011110000111100001111000011110000111100001111000011110000");

    // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractAddress = Address.parse(CONTRACT_ADDR);

    console.log("üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:", moderatorAddress.toString());
    console.log("üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:", buyerAddress.toString());
    console.log("üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü:", sellerAddress.toString());
    console.log("üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç:", contractAddress.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const moderatorBalance = await moderatorContract.getBalance();
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:", moderatorBalance.toString(), "nanoTON");
    if (moderatorBalance < toNano("0.1")) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const buyerBalance = await buyerContract.getBalance();
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", buyerBalance.toString(), "nanoTON");
    if (buyerBalance < toNano("0.1")) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!");
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
    const dealAmount = toNano("0.01");
    const memoText = "DEAL:1";

    console.log("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏...");
    console.log("   –°—É–º–º–∞:", dealAmount.toString(), "nanoTON");
    console.log("   Memo:", memoText);

    try {
        // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        console.log("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const memoCell = beginCell().storeStringTail(memoText).endCell();
        const createDealBody = beginCell()
            .storeUint(1, 32) // op_create_deal
            .storeUint(0, 64) // query_id
            .storeAddress(sellerAddress)
            .storeAddress(buyerAddress)
            .storeCoins(dealAmount)
            .storeRef(memoCell)
            .endCell();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        const moderatorSeqno = await moderatorContract.getSeqno();
        const createDealTransfer = moderatorWallet.createTransfer({
            secretKey: moderatorKey.secretKey,
            seqno: moderatorSeqno,
            messages: [
                {
                    info: {
                        type: "internal",
                        ihrDisabled: true,
                        bounce: true,
                        bounced: false,
                        dest: contractAddress,
                        value: { coins: toNano("0.05") },
                        ihrFee: 0n,
                        forwardFee: 0n,
                        createdLt: 0n,
                        createdAt: Math.floor(Date.now() / 1000)
                    },
                    body: createDealBody
                }
            ]
        });
        
        await client.sendExternalMessage(moderatorWallet, createDealTransfer);
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
        console.log("üìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:");
        console.log(`   Seqno: ${moderatorSeqno}`);
        console.log(`   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${moderatorAddress.toString()}`);
        console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${contractAddress.toString()}`);
        console.log(`   –°—É–º–º–∞: ${toNano("0.05").toString()} nanoTON`);
        console.log(`   –û–ø–µ—Ä–∞—Ü–∏—è: op_create_deal (1)`);
        console.log(`   Memo: ${memoText}`);

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        await sleep(5000);

// –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
        console.log("\nüí∞ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏...");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
        console.log("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º...");
        const dataBeforeFunding = await getContractData(client, contractAddress);
        console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π –¥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${dataBeforeFunding.commissionsPool.toString()} nanoTON`);

        // –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ (3% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏)
        const commissionRate = 3; // COMMISSION_WITH_MEMO –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const commissionAmount = (dealAmount * BigInt(commissionRate)) / 100n;
        const totalAmount = dealAmount + commissionAmount;
        
        console.log(`   –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${dealAmount.toString()} nanoTON`);
        console.log(`   –ö–æ–º–∏—Å—Å–∏—è (${commissionRate}%): ${commissionAmount.toString()} nanoTON`);
        console.log(`   –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount.toString()} nanoTON`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        const fundMemoCell = beginCell().storeStringTail(memoText).endCell();
        const fundDealBody = beginCell()
            .storeUint(5, 32) // op_fund_deal
            .storeUint(0, 64) // query_id
            .storeRef(fundMemoCell)
            .endCell();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        const buyerSeqno = await buyerContract.getSeqno();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –≥–∞–∑–∞
        const sendAmount = totalAmount + toNano("0.05"); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å –¥–ª—è –≥–∞–∑–∞
        
        const fundDealTransfer = buyerWallet.createTransfer({
            secretKey: buyerKey.secretKey,
            seqno: buyerSeqno,
            messages: [
                {
                    info: {
                        type: "internal",
                        ihrDisabled: true,
                        bounce: true,
                        bounced: false,
                        dest: contractAddress,
                        value: { coins: sendAmount }, // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ + –∫–æ–º–∏—Å—Å–∏—è + –∑–∞–ø–∞—Å –Ω–∞ –≥–∞–∑
                        ihrFee: 0n,
                        forwardFee: 0n,
                        createdLt: 0n,
                        createdAt: Math.floor(Date.now() / 1000)
                    },
                    body: fundDealBody
                }
            ]
        });
        
        await client.sendExternalMessage(buyerWallet, fundDealTransfer);
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
        console.log("üìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:");
        console.log(`   Seqno: ${buyerSeqno}`);
        console.log(`   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${buyerAddress.toString()}`);
        console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${contractAddress.toString()}`);
        console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sendAmount.toString()} nanoTON`);
        console.log(`   –û–ø–µ—Ä–∞—Ü–∏—è: op_fund_deal (5)`);
        console.log(`   Memo: ${memoText}`);

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        await sleep(5000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è...");
        const dataAfterFunding = await getContractData(client, contractAddress);
        console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${dataAfterFunding.commissionsPool.toString()} nanoTON`);
        if (dataAfterFunding.commissionsPool >= commissionAmount) {
            console.log("‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –ø—É–ª");
        } else {
            console.log("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –ø—É–ª –∏–ª–∏ –±—ã–ª–∞ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–π");
            console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${commissionAmount.toString()} nanoTON`);
            console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${dataAfterFunding.commissionsPool.toString()} nanoTON`);
        }

        // –®–∞–≥ 3: –†–∞–∑—Ä–µ—à–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞
        console.log("\nüîì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞...");
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
            const resolveMemoCell = beginCell().storeStringTail(memoText).endCell();
            
            console.log("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏...");
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ memo cell
            console.log("   Memo cell hash:", resolveMemoCell.hash().toString('hex'));
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            // –í–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏...");
            
            const resolveBody = beginCell()
                .storeUint(2, 32) // op_resolve_deal
                .storeUint(0, 64) // query_id
                .storeRef(resolveMemoCell)
                .storeUint(1, 1) // 1 = –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞
                .endCell();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            const resolveSeqno = await moderatorContract.getSeqno();
            const resolveTransfer = moderatorWallet.createTransfer({
                secretKey: moderatorKey.secretKey,
                seqno: resolveSeqno,
                messages: [
                    {
                        info: {
                            type: "internal",
                            ihrDisabled: true,
                            bounce: true,
                            bounced: false,
                            dest: contractAddress,
                            value: { coins: toNano("0.05") },
                            ihrFee: 0n,
                            forwardFee: 0n,
                            createdLt: 0n,
                            createdAt: Math.floor(Date.now() / 1000)
                        },
                        body: resolveBody
                    }
                ]
            });
            
            await client.sendExternalMessage(moderatorWallet, resolveTransfer);
            console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
            console.log("üìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:");
            console.log(`   Seqno: ${resolveSeqno}`);
            console.log(`   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${moderatorAddress.toString()}`);
            console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${contractAddress.toString()}`);
            console.log(`   –°—É–º–º–∞: ${toNano("0.05").toString()} nanoTON`);
            console.log(`   –û–ø–µ—Ä–∞—Ü–∏—è: op_resolve_deal (2)`);
            console.log(`   Memo: ${memoText}`);
            console.log(`   –í –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞: –î–∞ (1)`);
        } catch (resolveError: any) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", resolveError.message);
            if (resolveError.response) {
                console.error("   –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", resolveError.response.status);
                console.error("   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", resolveError.response.data);
            }
            console.log("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É...");
        }

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        await sleep(5000);
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π
        console.log("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ get-–º–µ—Ç–æ–¥
        const contractData = await getContractData(client, contractAddress);
        console.log("üìã –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:");
        console.log(`   –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: ${contractData.dealCounter}`);
        console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${contractData.commissionsPool.toString()} nanoTON`);
        console.log(`   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${contractData.moderatorAddress}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á—Ç–µ–Ω–∞
        if (contractData.commissionsPool >= commissionAmount) {
            console.log("‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –ø—É–ª");
        } else {
            console.log("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –ø—É–ª –∏–ª–∏ –±—ã–ª–∞ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–π");
        }

        console.log("\nüéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    }
}

function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ get-–º–µ—Ç–æ–¥ debug_get_contract_data
 * @param client TonClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @param contractAddress –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
async function getContractData(client: TonClient, contractAddress: Address) {
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        const result = await client.callGetMethod(contractAddress, "debug_get_contract_data");
        
        console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:", JSON.stringify(result, (key, value) => 
            typeof value === 'bigint' ? value.toString() : value, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–µ–∫
        if (!result || !result.stack) {
            throw new Error("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–µ–∫");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–µ–∫–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        let dealCounter = 0;
        let commissionsPool = 0n;
        let moderatorAddress = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
        try {
            // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç–µ–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            console.log("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–∫–∞:", JSON.stringify(result.stack, (key, value) => 
                typeof value === 'bigint' ? value.toString() : value, 2));
            
            // –í TON API —Å—Ç–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
            
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–µ–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π [—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ]
            if (Array.isArray(result.stack) && result.stack.length >= 3) {
                if (Array.isArray(result.stack[0]) && result.stack[0].length >= 2) {
                    dealCounter = Number(result.stack[0][1]);
                    commissionsPool = BigInt(result.stack[1][1]);
                    
                    if (typeof result.stack[2][1] === 'string') {
                        moderatorAddress = result.stack[2][1];
                        if (moderatorAddress.startsWith("cs_")) {
                            moderatorAddress = moderatorAddress.slice(3);
                        }
                    }
                    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 1 (–º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π)");
                }
                // –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç–µ–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ type –∏ value
                else if (result.stack[0] && 'type' in result.stack[0] && 'value' in result.stack[0]) {
                    dealCounter = Number(result.stack[0].value);
                    commissionsPool = BigInt(result.stack[1].value);
                    
                    if (typeof result.stack[2].value === 'string') {
                        moderatorAddress = result.stack[2].value;
                        if (moderatorAddress.startsWith("cs_")) {
                            moderatorAddress = moderatorAddress.slice(3);
                        }
                    }
                    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 2 (–æ–±—ä–µ–∫—Ç—ã —Å type/value)");
                }
                // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç–µ–∫–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π API)
                else {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
                    try {
                        dealCounter = Number(result.stack[0]);
                        commissionsPool = BigInt(result.stack[1]);
                        if (typeof result.stack[2] === 'string') {
                            moderatorAddress = result.stack[2];
                        }
                        console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 3 (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)");
                    } catch (directAccessError: any) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ —Å—Ç–µ–∫—É:", directAccessError.message);
                    }
                }
            }
            
            console.log("üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
            console.log(`   –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: ${dealCounter}`);
            console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${commissionsPool.toString()}`);
            console.log(`   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${moderatorAddress}`);
        } catch (parseError: any) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö:", parseError.message);
            console.error("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–∫–∞:", result.stack);
        }
        
        return {
            dealCounter,
            commissionsPool,
            moderatorAddress
        };
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", error.message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            dealCounter: 0,
            commissionsPool: 0n,
            moderatorAddress: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        };
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π
 * @param client TonClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @param contractAddress –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
async function monitorCommissionsPool(client: TonClient, contractAddress: Address) {
    console.log("\nüìà –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π...");
    
    let lastCommissionPool = 0n;
    let checkCount = 0;
    const maxChecks = 5;
    
    while (checkCount < maxChecks) {
        try {
            const data = await getContractData(client, contractAddress);
            const currentPool = data.commissionsPool;
            
            console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount + 1}:`);
            console.log(`   –¢–µ–∫—É—â–∏–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${currentPool.toString()} nanoTON`);
            
            if (checkCount > 0) {
                const difference = currentPool - lastCommissionPool;
                if (difference > 0n) {
                    console.log(`   ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞: ${difference.toString()} nanoTON`);
                } else if (difference < 0n) {
                    console.log(`   ‚¨áÔ∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞: ${(-difference).toString()} nanoTON`);
                } else {
                    console.log(`   ‚ÜîÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
                }
            }
            
            lastCommissionPool = currentPool;
            checkCount++;
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if (checkCount < maxChecks) {
                console.log("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...");
                await sleep(10000); // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            }
        } catch (error: any) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${error.message}`);
            break;
        }
    }
    
    console.log("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(console.error);

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// monitorCommissionsPool(new TonClient({ endpoint: await getHttpEndpoint({ network: "testnet" }) }), Address.parse(CONTRACT_ADDR)).catch(console.error);
