import {
    Address,
    TonClient
} from "ton";
import { getHttpEndpoint } from "@orbs-network/ton-access";
import * as dotenv from "dotenv";

dotenv.config();

// –ê–¥—Ä–µ—Å –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const CONTRACT_ADDR = "EQAKxreVyMzGlahLmkfX0iQayBGTQqL5XwuFwgVBJVPO16Jw";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ get-–º–µ—Ç–æ–¥ debug_get_contract_data
 * @param client TonClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @param contractAddress –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
async function getContractData(client: TonClient, contractAddress: Address) {
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        const result = await client.callGetMethod(contractAddress, "debug_get_contract_data");
        
        console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:", JSON.stringify(result, (key, value) => 
            typeof value === 'bigint' ? value.toString() : value, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–µ–∫
        if (!result || !result.stack) {
            throw new Error("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–µ–∫");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–µ–∫–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        let dealCounter = 0;
        let commissionsPool = 0n;
        let moderatorAddress = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
        try {
            // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç–µ–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            console.log("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–∫–∞:", JSON.stringify(result.stack, (key, value) => 
                typeof value === 'bigint' ? value.toString() : value, 2));
            
            // –í TON API —Å—Ç–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
            
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–µ–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π [—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ]
            if (Array.isArray(result.stack) && result.stack.length >= 3) {
                if (Array.isArray(result.stack[0]) && result.stack[0].length >= 2) {
                    dealCounter = Number(result.stack[0][1]);
                    commissionsPool = BigInt(result.stack[1][1]);
                    
                    if (typeof result.stack[2][1] === 'string') {
                        moderatorAddress = result.stack[2][1];
                        if (moderatorAddress.startsWith("cs_")) {
                            moderatorAddress = moderatorAddress.slice(3);
                        }
                    }
                    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 1 (–º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π)");
                }
                // –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç–µ–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ type –∏ value
                else if (result.stack[0] && 'type' in result.stack[0] && 'value' in result.stack[0]) {
                    dealCounter = Number(result.stack[0].value);
                    commissionsPool = BigInt(result.stack[1].value);
                    
                    if (typeof result.stack[2].value === 'string') {
                        moderatorAddress = result.stack[2].value;
                        if (moderatorAddress.startsWith("cs_")) {
                            moderatorAddress = moderatorAddress.slice(3);
                        }
                    }
                    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 2 (–æ–±—ä–µ–∫—Ç—ã —Å type/value)");
                }
                // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç–µ–∫–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π API)
                else {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
                    try {
                        dealCounter = Number(result.stack[0]);
                        commissionsPool = BigInt(result.stack[1]);
                        if (typeof result.stack[2] === 'string') {
                            moderatorAddress = result.stack[2];
                        }
                        console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ 3 (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)");
                    } catch (directAccessError: any) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ —Å—Ç–µ–∫—É:", directAccessError.message);
                    }
                }
            }
            
            console.log("üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
            console.log(`   –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: ${dealCounter}`);
            console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${commissionsPool.toString()}`);
            console.log(`   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${moderatorAddress}`);
        } catch (parseError: any) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö:", parseError.message);
            console.error("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–∫–∞:", result.stack);
        }
        
        return {
            dealCounter,
            commissionsPool,
            moderatorAddress
        };
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", error.message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            dealCounter: 0,
            commissionsPool: 0n,
            moderatorAddress: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        };
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π
 * @param client TonClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
 * @param contractAddress –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param intervalSeconds –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param maxChecks –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ (0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
 */
async function monitorCommissionsPool(
    client: TonClient, 
    contractAddress: Address, 
    intervalSeconds: number = 10,
    maxChecks: number = 0
) {
    console.log("\nüìà –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π...");
    console.log(`   –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractAddress.toString()}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${intervalSeconds} —Å–µ–∫—É–Ω–¥`);
    if (maxChecks > 0) {
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${maxChecks}`);
    } else {
        console.log(`   –†–µ–∂–∏–º: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)`);
    }
    
    let lastCommissionPool = 0n;
    let checkCount = 0;
    let totalCommissionIncrease = 0n;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try {
        const initialData = await getContractData(client, contractAddress);
        lastCommissionPool = initialData.commissionsPool;
        console.log(`\nüìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
        console.log(`   –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: ${initialData.dealCounter}`);
        console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${initialData.commissionsPool.toString()} nanoTON`);
        console.log(`   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${initialData.moderatorAddress}`);
    } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`);
        return;
    }
    
    while (maxChecks === 0 || checkCount < maxChecks) {
        // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));
        
        try {
            checkCount++;
            const data = await getContractData(client, contractAddress);
            const currentPool = data.commissionsPool;
            
            console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}:`);
            console.log(`   –¢–µ–∫—É—â–∏–π –ø—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${currentPool.toString()} nanoTON`);
            
            const difference = currentPool - lastCommissionPool;
            if (difference > 0n) {
                console.log(`   ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞: ${difference.toString()} nanoTON`);
                totalCommissionIncrease += difference;
            } else if (difference < 0n) {
                console.log(`   ‚¨áÔ∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞: ${(-difference).toString()} nanoTON (–≤–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–π)`);
            } else {
                console.log(`   ‚ÜîÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
            }
            
            console.log(`   –í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π —Å –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${totalCommissionIncrease.toString()} nanoTON`);
            
            lastCommissionPool = currentPool;
        } catch (error: any) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}): ${error.message}`);
        }
    }
    
    console.log("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–∞ –∫–æ–º–∏—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${checkCount}`);
    console.log(`   –û–±—â–µ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π: ${totalCommissionIncrease.toString()} nanoTON`);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
async function checkContractState() {
    try {
        console.log("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");
        const endpoint = await getHttpEndpoint({ network: "testnet" });
        const client = new TonClient({ endpoint });
        
        const contractAddress = Address.parse(CONTRACT_ADDR);
        console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractAddress.toString()}`);
        
        const data = await getContractData(client, contractAddress);
        
        console.log("\nüìã –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:");
        console.log(`   –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: ${data.dealCounter}`);
        console.log(`   –ü—É–ª –∫–æ–º–∏—Å—Å–∏–π: ${data.commissionsPool.toString()} nanoTON`);
        console.log(`   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${data.moderatorAddress}`);
        
        console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes("--help") || args.includes("-h")) {
        console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
        console.log("  npm run monitor-commissions -- [–æ–ø—Ü–∏–∏]");
        console.log("\n–û–ø—Ü–∏–∏:");
        console.log("  --check       –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
        console.log("  --monitor     –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∏—Å—Å–∏–π");
        console.log("  --interval=N  –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)");
        console.log("  --count=N     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ (0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)");
        console.log("  --help, -h    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
        return;
    }
    
    if (args.includes("--check")) {
        await checkContractState();
        return;
    }
    
    if (args.includes("--monitor")) {
        // –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        let interval = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
        const intervalArg = args.find(arg => arg.startsWith("--interval="));
        if (intervalArg) {
            const intervalValue = parseInt(intervalArg.split("=")[1]);
            if (!isNaN(intervalValue) && intervalValue > 0) {
                interval = intervalValue;
            }
        }
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        let count = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        const countArg = args.find(arg => arg.startsWith("--count="));
        if (countArg) {
            const countValue = parseInt(countArg.split("=")[1]);
            if (!isNaN(countValue) && countValue >= 0) {
                count = countValue;
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        const endpoint = await getHttpEndpoint({ network: "testnet" });
        const client = new TonClient({ endpoint });
        const contractAddress = Address.parse(CONTRACT_ADDR);
        
        await monitorCommissionsPool(client, contractAddress, interval, count);
        return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–ø—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    console.log("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–ø—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.");
    console.log("–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...");
    await checkContractState();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(console.error);
